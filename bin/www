#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('RealEstateServer:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var bundleName = 'cert/cert.bundle';
var crtName = 'cert/cert.crt';
var keyName = 'cert/cert.key';

// Ensure SSL Certificate files exist
try {
  fs.lstatSync(keyName);
  fs.lstatSync(crtName);
  fs.lstatSync(bundleName);
}
catch (e) {
  console.log('Cannot find cert files. Please see README for more info');
  return;
}

// Configure SSL credentials
var credentials = {
  key: fs.readFileSync(keyName),
  cert: fs.readFileSync(crtName),
  ca: fs.readFileSync(bundleName),
  requestCert: true,
  rejectUnauthorized: false
};



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var secureServer = https.createServer(credentials, app);
/**
 * Listen on provided port, on all network interfaces.
 */

if (app.get('env') === 'development') {
  console.log('DEV MODE');
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
} else if (app.get('env') === 'production') {
  console.log('PRODUCTION MODE');
  secureServer.listen(port);
  secureServer.on('error', onError);
  secureServer.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Website Listening on ' + bind);
}
